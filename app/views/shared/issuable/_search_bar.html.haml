- type = local_assigns.fetch(:type)
- board = local_assigns.fetch(:board, nil)
- block_css_class = type != :boards_modal ? 'row-content-block second-block' : ''
- full_path = @project.present? ? @project.full_path : @group.full_path
- user_can_admin_list = board && can?(current_user, :admin_list, board.parent)
- show_sorting_dropdown = local_assigns.fetch(:show_sorting_dropdown, true)

.issues-filters
  .issues-details-filters.filtered-search-block{ class: block_css_class, "v-pre" => type == :boards_modal }
    - if type == :boards
      #js-multiple-boards-switcher.inline.boards-switcher{ "v-cloak" => true }
        = render_if_exists "shared/boards/switcher", board: board
    = form_tag page_filter_path(without: [:assignee_id, :author_id, :milestone_title, :label_name, :search]), method: :get, class: 'filter-form js-filter-form' do
      - if params[:search].present?
        = hidden_field_tag :search, params[:search]
      - if @can_bulk_update
        .check-all-holder.hidden
          = check_box_tag "check-all-issues", nil, false, class: "check-all-issues left"
      .issues-other-filters.filtered-search-wrapper
        .filtered-search-box
          - if type != :boards_modal && type != :boards
            = dropdown_tag(custom_icon('icon_history'),
              options: { wrapper_class: "filtered-search-history-dropdown-wrapper",
              toggle_class: "filtered-search-history-dropdown-toggle-button",
              dropdown_class: "filtered-search-history-dropdown",
              content_class: "filtered-search-history-dropdown-content",
              title: "Recent searches" }) do
              .js-filtered-search-history-dropdown{ data: { full_path: full_path } }
          .filtered-search-box-input-container.droplab-dropdown
            .scroll-container
              %ul.tokens-container.list-unstyled
                %li.input-token
                  %input.form-control.filtered-search{ search_filter_input_options(type) }
            #js-dropdown-hint.filtered-search-input-dropdown-menu.dropdown-menu.hint-dropdown
              %ul{ data: { dropdown: true } }
                %li.filter-dropdown-item{ data: { action: 'submit' } }
                  %button.btn.btn-link{ type: 'button' }
                    = sprite_icon('search')
                    %span
                      = _('Press Enter or click to search')
              %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                %li.filter-dropdown-item
                  %button.btn.btn-link{ type: 'button' }
                    -# Encapsulate static class name `{{icon}}` inside #{} to bypass
                    -# haml lint's ClassAttributeWithStaticValue
                    %svg
                      %use{ 'xlink:href': "#{'{{icon}}'}" }
                    %span.js-filter-hint
                      {{hint}}
                    %span.js-filter-tag.dropdown-light-content
                      {{tag}}
            #js-dropdown-author.filtered-search-input-dropdown-menu.dropdown-menu
              - if current_user
                %ul{ data: { dropdown: true } }
                  = render 'shared/issuable/user_dropdown_item',
                    user: current_user
              %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                = render 'shared/issuable/user_dropdown_item',
                  user: User.new(username: '{{username}}', name: '{{name}}'),
                  avatar: { lazy: true, url: '{{avatar_url}}' }
            #js-dropdown-assignee.filtered-search-input-dropdown-menu.dropdown-menu
              %ul{ data: { dropdown: true } }
                %li.filter-dropdown-item{ data: { value: 'none' } }
                  %button.btn.btn-link{ type: 'button' }
                    = _('None')
                %li.filter-dropdown-item{ data: { value: 'any' } }
                  %button.btn.btn-link{ type: 'button' }
                    = _('Any')
                %li.divider.droplab-item-ignore
                - if current_user
                  = render 'shared/issuable/user_dropdown_item',
                    user: current_user
              %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                = render 'shared/issuable/user_dropdown_item',
                  user: User.new(username: '{{username}}', name: '{{name}}'),
                  avatar: { lazy: true, url: '{{avatar_url}}' }
            #js-dropdown-milestone.filtered-search-input-dropdown-menu.dropdown-menu
              %ul{ data: { dropdown: true } }
                %li.filter-dropdown-item{ data: { value: 'none' } }
                  %button.btn.btn-link{ type: 'button' }
                    = _('None')
                %li.filter-dropdown-item{ data: { value: 'any' } }
                  %button.btn.btn-link{ type: 'button' }
                    = _('Any')
                %li.filter-dropdown-item{ data: { value: 'upcoming' } }
                  %button.btn.btn-link{ type: 'button' }
                    = _('Upcoming')
                %li.filter-dropdown-item{ data: { value: 'started' } }
                  %button.btn.btn-link{ type: 'button' }
                    = _('Started')
                %li.divider.droplab-item-ignore
              %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                %li.filter-dropdown-item
                  %button.btn.btn-link.js-data-value{ type: 'button' }
                    {{title}}
            #js-dropdown-label.filtered-search-input-dropdown-menu.dropdown-menu
              %ul{ data: { dropdown: true } }
                %li.filter-dropdown-item{ data: { value: 'none' } }
                  %button.btn.btn-link{ type: 'button' }
                    = _('No Label')
                %li.divider.droplab-item-ignore
              %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                %li.filter-dropdown-item
                  %button.btn.btn-link{ type: 'button' }
                    %span.dropdown-label-box{ style: 'background: {{color}}' }
                    %span.label-title.js-data-value
                      {{title}}
            #js-dropdown-my-reaction.filtered-search-input-dropdown-menu.dropdown-menu
              %ul{ data: { dropdown: true } }
                %li.filter-dropdown-item{ data: { value: 'none' } }
                  %button.btn.btn-link{ type: 'button' }
                    = _('None')
                %li.filter-dropdown-item{ data: { value: 'any' } }
                  %button.btn.btn-link{ type: 'button' }
                    = _('Any')
                %li.divider.droplab-item-ignore
              %ul.filter-dropdown{ data: { dynamic: true, dropdown: true } }
                %li.filter-dropdown-item
                  %button.btn.btn-link{ type: 'button' }
                    %gl-emoji
                    %span.js-data-value.prepend-left-10
                      {{name}}
            #js-dropdown-wip.filtered-search-input-dropdown-menu.dropdown-menu
              %ul.filter-dropdown{ data: { dropdown: true } }
                %li.filter-dropdown-item{ data: { value: 'yes', capitalize: true } }
                  %button.btn.btn-link{ type: 'button' }
                    = _('Yes')
                %li.filter-dropdown-item{ data: { value: 'no', capitalize: true } }
                  %button.btn.btn-link{ type: 'button' }
                    = _('No')

            = render_if_exists 'shared/issuable/filter_weight', type: type

          %button.clear-search.hidden{ type: 'button' }
            = icon('times')
        .filter-dropdown-container
          - if type == :boards
            .js-board-config{ data: { can_admin_list: user_can_admin_list, has_scope: board.scoped? } }
            - if user_can_admin_list
              = render 'shared/issuable/board_create_list_dropdown', board: board
              - if @project
                #js-add-issues-btn.prepend-left-10{ data: { can_admin_list: can?(current_user, :admin_list, @project) } }
            #js-toggle-focus-btn
          - elsif show_sorting_dropdown
            = render 'shared/sort_dropdown'
